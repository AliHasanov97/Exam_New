@{
    Layout = null;
}
@model List<Exam.Models.Question>
@Html.AntiForgeryToken()

<!DOCTYPE html>
<html lang="az">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>İmtahan - Riyaziyyat</title>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        :root {
            --primary: #6C5CE7;
            --primary-light: #A29BFE;
            --secondary: #00B894;
            --danger: #D63031;
            --warning: #FDCB6E;
            --dark: #2D3436;
            --light: #F5F6FA;
            --border: #DFE6E9;
        }

        * {
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }

        body {
            font-family: 'Segoe UI', system-ui, sans-serif;
            background-color: var(--light);
            color: var(--dark);
            display: flex;
            min-height: 100vh;
            overflow-x: hidden;
        }

        .sidebar {
            width: 300px;
            background: white;
            border-right: 1px solid var(--border);
            padding: 25px;
            display: flex;
            flex-direction: column;
            position: fixed;
            height: 100vh;
            overflow-y: auto;
            transition: transform 0.3s ease;
            z-index: 1000;
        }

        .student-profile {
            text-align: center;
            margin-bottom: 30px;
            padding-bottom: 20px;
            border-bottom: 1px solid var(--border);
        }

        .student-avatar {
            width: 100px;
            height: 100px;
            border-radius: 50%;
            object-fit: cover;
            border: 3px solid var(--primary-light);
            margin: 0 auto 15px;
        }

        .student-name {
            font-size: 1.2rem;
            font-weight: 600;
            margin-bottom: 5px;
        }

        .student-id {
            color: var(--dark);
            opacity: 0.7;
            font-size: 0.9rem;
        }

        .exam-status {
            background: rgba(108, 92, 231, 0.05);
            border-radius: 12px;
            padding: 20px;
            margin-bottom: 20px;
        }

        .status-title {
            font-size: 1rem;
            font-weight: 600;
            margin-bottom: 15px;
            color: var(--primary);
            display: flex;
            align-items: center;
            gap: 8px;
        }

            .status-title i {
                font-size: 1.2rem;
            }

        .status-item {
            display: flex;
            justify-content: space-between;
            margin-bottom: 10px;
            font-size: 0.95rem;
        }

        .status-value {
            font-weight: 600;
        }

        .timer-container {
            background: linear-gradient(135deg, var(--primary), var(--primary-light));
            color: white;
            padding: 20px;
            border-radius: 12px;
            text-align: center;
            margin-top: auto;
        }

        .timer-label {
            font-size: 0.9rem;
            opacity: 0.9;
            margin-bottom: 5px;
        }

        .timer {
            font-size: 1.8rem;
            font-weight: 700;
            font-family: monospace;
        }

        .submit-btn {
            display: block;
            width: 100%;
            padding: 15px;
            background: var(--danger);
            color: white;
            border: none;
            border-radius: 8px;
            font-weight: 600;
            margin-top: 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

            .submit-btn:hover {
                background: #C23636;
                transform: translateY(-2px);
            }

        .main-content {
            flex: 1;
            padding: 30px;
            margin-left: 300px;
            width: calc(100% - 300px);
            overflow-y: auto;
            height: 100vh;
        }

        .exam-header {
            margin-bottom: 30px;
        }

        .exam-title {
            font-size: 1.8rem;
            font-weight: 700;
            color: var(--primary);
            margin-bottom: 10px;
        }

        .exam-description {
            color: var(--dark);
            opacity: 0.8;
            margin-bottom: 20px;
        }

        .progress-container {
            margin-bottom: 30px;
        }

        .progress-text {
            display: flex;
            justify-content: space-between;
            margin-bottom: 8px;
            font-size: 0.95rem;
        }

        .progress-bar {
            height: 8px;
            background: var(--border);
            border-radius: 4px;
            overflow: hidden;
        }

        .progress-fill {
            height: 100%;
            background: linear-gradient(90deg, var(--primary), var(--secondary));
            border-radius: 4px;
            width: 0%;
            transition: width 0.4s ease;
        }

        .question-card {
            background: white;
            border-radius: 12px;
            padding: 25px;
            margin-bottom: 25px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.03);
            border: 1px solid var(--border);
        }

        .question-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .question-number {
            font-weight: 700;
            color: var(--primary);
            font-size: 1.1rem;
        }

        .question-flag {
            color: var(--danger);
            cursor: pointer;
            font-size: 1.2rem;
        }

        .question-text {
            font-size: 1.1rem;
            line-height: 1.6;
            margin-bottom: 25px;
        }

        .options-grid {
            display: grid;
            grid-template-columns: 1fr;
            gap: 12px;
        }

        .option {
            padding: 15px 20px;
            border-radius: 10px;
            background: var(--light);
            border: 2px solid var(--border);
            cursor: pointer;
            display: flex;
            align-items: center;
            transition: all 0.2s ease;
        }

            .option:hover {
                border-color: var(--primary-light);
                background: rgba(108, 92, 231, 0.05);
            }

            .option.selected {
                background: rgba(108, 92, 231, 0.1);
                border-color: var(--primary);
            }

        .option-letter {
            width: 30px;
            height: 30px;
            border-radius: 50%;
            background: var(--primary-light);
            color: var(--primary);
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            font-weight: 700;
            flex-shrink: 0;
            transition: all 0.2s ease;
        }

        .option.selected .option-letter {
            background: var(--primary);
            color: white;
        }

        .explanation {
            margin-top: 20px;
            padding: 15px;
            background-color: rgba(0, 184, 148, 0.1);
            border-radius: 8px;
            border-left: 4px solid var(--secondary);
            font-size: 0.95rem;
            line-height: 1.6;
        }

        /* Mobile Menu Toggle */
        .mobile-menu-toggle {
            display: none;
            position: fixed;
            top: 20px;
            left: 20px;
            background: var(--primary);
            color: white;
            border: none;
            width: 40px;
            height: 40px;
            border-radius: 50%;
            z-index: 1001;
            cursor: pointer;
            box-shadow: 0 2px 10px rgba(0,0,0,0.2);
        }

        .sidebar-overlay {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: rgba(0,0,0,0.5);
            z-index: 999;
        }

        /* Responsive Styles */
        @@media screen and (max-width: 1200px) {
            .sidebar

        {
            width: 260px;
            padding: 20px;
        }

        .main-content {
            margin-left: 260px;
            width: calc(100% - 260px);
            padding: 25px;
        }

        }

        @@media screen and (max-width: 992px) {
            .sidebar

        {
            transform: translateX(-100%);
        }

        .sidebar.active {
            transform: translateX(0);
            box-shadow: 5px 0 15px rgba(0,0,0,0.1);
        }

        .main-content {
            margin-left: 0;
            width: 100%;
        }

        .mobile-menu-toggle {
            display: block;
        }

        .sidebar.active + .sidebar-overlay {
            display: block;
        }

        .exam-title {
            margin-top: 60px;
        }

        }

        @@media screen and (max-width: 768px) {
            .exam-title

        {
            font-size: 1.5rem;
        }

        .question-card {
            padding: 20px;
        }

        .question-text {
            font-size: 1rem;
        }

        .option {
            padding: 12px 15px;
        }

        .timer {
            font-size: 1.5rem;
        }

        }

        @@media screen and (max-width: 576px) {
            .student-avatar

        {
            width: 80px;
            height: 80px;
        }

        .student-name {
            font-size: 1rem;
        }

        .exam-status, .timer-container {
            padding: 15px;
        }

        .question-card {
            padding: 15px;
        }

        .option-letter {
            width: 25px;
            height: 25px;
            margin-right: 10px;
            font-size: 0.8rem;
        }

        .mobile-menu-toggle {
            top: 15px;
            left: 15px;
            width: 36px;
            height: 36px;
        }

        }
    </style>
</head>
<body>
    <!-- Mobile Menu Toggle -->
    <button class="mobile-menu-toggle" id="mobileMenuToggle">
        <i class="bi bi-list"></i>
    </button>

    <!-- Sidebar -->
    <div class="sidebar" id="sidebar">
        <div class="student-profile">
            <img src="@ViewBag.UserImage" alt="Tələbə" class="student-avatar">
            <h3 class="student-name">@ViewBag.UserName</h3>
            <p class="student-id">Tələbə ID: ST20230045</p>
        </div>

        <div class="exam-status">
            <div class="status-title">📊 İmtahan Statistikası</div>
            <div class="status-item"><span>Ümumi suallar:</span> <span class="status-value">@Model.Count</span></div>
            <div class="status-item"><span>Cavablandırılıb:</span> <span class="status-value" id="answered-count">0</span></div>
            <div class="status-item"><span>Qalıb:</span> <span class="status-value" id="remaining-count">@Model.Count</span></div>
            <div class="status-item"><span>İşarələnib:</span> <span class="status-value" id="flagged-count">0</span></div>
        </div>

        <div class="timer-container">
            <div class="timer-label">Qalan vaxt</div>
            <div class="timer" id="exam-timer">01:30:00</div>
        </div>

        <button class="submit-btn" id="submit-exam">İmtahanı Yekunla</button>
    </div>

    <!-- Sidebar Overlay -->
    <div class="sidebar-overlay" id="sidebarOverlay"></div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="exam-header">
            <h1 class="exam-title">@ViewBag.ExamName İmtahanı</h1>
            <p class="exam-description">Bu imtahanda cəmi @Model.Count sual var. Uğurlar!</p>
        </div>

        <div class="progress-container">
            <div class="progress-text">
                <span>İmtahan irəliləyişi</span>
                <span id="progress-text">0/@Model.Count (0%)</span>
            </div>
            <div class="progress-bar">
                <div class="progress-fill" id="progress-fill"></div>
            </div>
        </div>

        <!-- Questions List -->
        @for (int i = 0; i < Model.Count; i++)
        {
            var question = Model[i];
            <div class="question-card" data-question-id="@question.Id">
                <div class="question-header">
                    <span class="question-number">Sual @(i + 1)</span>
                    <span class="question-flag" data-flagged="false">🏴</span>
                </div>
                <p class="question-text">@question.QuestionText</p>
                <div class="options-grid">
                    @if (!string.IsNullOrEmpty(question.AnswerA))
                    {
                        <div class="option" data-option="A">
                            <span class="option-letter">A</span>
                            <span>@question.AnswerA</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(question.AnswerB))
                    {
                        <div class="option" data-option="B">
                            <span class="option-letter">B</span>
                            <span>@question.AnswerB</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(question.AnswerC))
                    {
                        <div class="option" data-option="C">
                            <span class="option-letter">C</span>
                            <span>@question.AnswerC</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(question.AnswerD))
                    {
                        <div class="option" data-option="D">
                            <span class="option-letter">D</span>
                            <span>@question.AnswerD</span>
                        </div>
                    }
                    @if (!string.IsNullOrEmpty(question.AnswerE))
                    {
                        <div class="option" data-option="E">
                            <span class="option-letter">E</span>
                            <span>@question.AnswerE</span>
                        </div>
                    }
                </div>
            </div>
        }
    </div>

    <script>
        // Mobile menu functionality
        const mobileMenuToggle = document.getElementById('mobileMenuToggle');
        const sidebar = document.getElementById('sidebar');
        const sidebarOverlay = document.getElementById('sidebarOverlay');

        mobileMenuToggle.addEventListener('click', () => {
            sidebar.classList.toggle('active');
            sidebarOverlay.style.display = sidebar.classList.contains('active') ? 'block' : 'none';
        });

        sidebarOverlay.addEventListener('click', () => {
            sidebar.classList.remove('active');
            sidebarOverlay.style.display = 'none';
        });

        // Question selection
        document.querySelectorAll('.option').forEach(option => {
            option.addEventListener('click', function () {
                const card = this.closest('.question-card');
                card.querySelectorAll('.option').forEach(opt => opt.classList.remove('selected'));
                this.classList.add('selected');
                updateProgress();
            });
        });

        // Flagging questions
        document.querySelectorAll('.question-flag').forEach(flag => {
            flag.addEventListener('click', function () {
                const isFlagged = this.getAttribute('data-flagged') === 'true';
                this.setAttribute('data-flagged', !isFlagged);
                this.textContent = isFlagged ? '🏴' : '🚩';
                updateFlaggedCount();
            });
        });

        // Update progress stats
        function updateProgress() {
            const answered = document.querySelectorAll('.option.selected').length;
            const total = document.querySelectorAll('.question-card').length;
            const remaining = total - answered;
            const percent = Math.round((answered / total) * 100);

            document.getElementById('progress-fill').style.width = percent + '%';
            document.getElementById('progress-text').textContent = `${answered}/${total} (${percent}%)`;
            document.getElementById('answered-count').textContent = answered;
            document.getElementById('remaining-count').textContent = remaining;
        }

        function updateFlaggedCount() {
            const flagged = document.querySelectorAll('.question-flag[data-flagged="true"]').length;
            document.getElementById('flagged-count').textContent = flagged;
        }

        // Timer functionality
        function startTimer(duration, display) {
            let timer = duration, hours, minutes, seconds;
            const interval = setInterval(() => {
                hours = String(Math.floor(timer / 3600)).padStart(2, '0');
                minutes = String(Math.floor((timer % 3600) / 60)).padStart(2, '0');
                seconds = String(timer % 60).padStart(2, '0');

                display.textContent = `${hours}:${minutes}:${seconds}`;

                if (--timer < 0) {
                    clearInterval(interval);
                    alert("Vaxt bitdi!");
                    submitExam();
                }
            }, 1000);
        }

        // Submit exam
        function submitExam() {
            const answers = [];
            document.querySelectorAll('.question-card').forEach(card => {
                const questionId = card.getAttribute('data-question-id');
                const selected = card.querySelector('.option.selected');
                answers.push({
                    QuestionId: questionId,
                    SelectedOption: selected ? selected.getAttribute('data-option') : null
                });
            });

            fetch('@Url.Action("SubmitExam", "Exam", new { area = "Cabinet" })', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    examSessionId: '@ViewBag.ExamSessionId',
                    answers: answers
                })
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                if (data.success) {
                    window.location.href = data.redirectUrl;
                } else {
                    alert("Xəta baş verdi: " + data.message);
                }
            })
            .catch(error => {
                console.error("Server xətası:", error);
                alert("İmtahan göndərilərkən xəta baş verdi: " + error.message);
            });
        }

        // Initialize on load
        window.onload = function () {
            const duration = 5400; // 1 saat 30 dəqiqə
            const display = document.getElementById('exam-timer');
            startTimer(duration, display);

            document.getElementById('submit-exam').addEventListener('click', function (e) {
                e.preventDefault();
                if (confirm("İmtahanı yekunlaşdırmaq istədiyinizə əminsinizmi?")) {
                    submitExam();
                }
            });

            // Close sidebar when submitting on mobile
            if (window.innerWidth <= 992) {
                document.getElementById('submit-exam').addEventListener('click', function() {
                    sidebar.classList.remove('active');
                    sidebarOverlay.style.display = 'none';
                });
            }
        };
    </script>
</body>
</html>